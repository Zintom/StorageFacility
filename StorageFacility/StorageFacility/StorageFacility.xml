<?xml version="1.0"?>
<doc>
    <assembly>
        <name>StorageFacility</name>
    </assembly>
    <members>
        <member name="M:Zintom.StorageFacility.Helpers.GetValue``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Retreives a <typeparamref name="TValue"/> from the dictionary with the given <paramref name="key"/>.
            </summary>
            <param name="dictionary">The dictionary to search.</param>
            <param name="key">The key for the value to retrieve.</param>
            <param name="defaultValue">The value to return if the key does not exist.</param>
            <returns>The <typeparamref name="TValue"/> for the given <paramref name="key"/>, or <paramref name="defaultValue"/> if it does not exist.</returns>
        </member>
        <member name="M:Zintom.StorageFacility.Helpers.GetValue``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0,``1)">
            <inheritdoc cref="M:Zintom.StorageFacility.Helpers.GetValue``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)"/>
        </member>
        <member name="M:Zintom.StorageFacility.Helpers.AddOrReplace``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
            <inheritdoc cref="M:System.Collections.Generic.Dictionary`2.Add(`0,`1)"/>
            <para>If the key already exists, it is replaced by the new key and value provided.</para>
            </summary>
        </member>
        <member name="M:Zintom.StorageFacility.Helpers.AddIfNotNull``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
            Adds the given key and value pair to the given <see cref="T:System.Collections.Generic.Dictionary`2"/> <b>if</b> the value is <b>not</b> <see langword="null"/>
            </summary>
            <returns>A <see cref="T:System.Boolean"/> value representing whether the value was added or not.</returns>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add. Null values will not be added.</param>
        </member>
        <member name="M:Zintom.StorageFacility.Helpers.AddIfNotNull``2(System.Collections.Generic.Dictionary{``0,``1},System.Nullable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <inheritdoc cref="M:Zintom.StorageFacility.Helpers.AddIfNotNull``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)"/>
        </member>
        <member name="M:Zintom.StorageFacility.Helpers.UnEscapeString(System.String)">
            <summary>
            Removes all escape characters from the Double Quote character.
            </summary>
        </member>
        <member name="M:Zintom.StorageFacility.Helpers.ContainsAt(System.Char[],System.Char,System.Int32)">
            <summary>
            Checks that the array contains the specified <paramref name="expectedCharacter"/> at the given <paramref name="index"/>.
            </summary>
            <param name="array"></param>
            <param name="expectedCharacter"></param>
            <param name="index"></param>
            <returns><b>true</b> if the given <paramref name="expectedCharacter"/> exists at the given <paramref name="index"/>, or if not, returns <b>false</b>.</returns>
        </member>
        <member name="M:Zintom.StorageFacility.Helpers.MatchesSequence``1(System.Span{``0},System.Span{``0})">
            <summary>
            Determines whether the first sequence of <see cref="T:System.Span`1"/> matches
            the second sequence of <see cref="T:System.Span`1"/> exactly.
            </summary>
            <param name="sequence">The sequence to test.</param>
            <returns>If the first sequence exactly matches the second, returns <see langword="true"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Zintom.StorageFacility.Helpers.FollowsRecurringSequence``1(System.Span{``0},System.Span{``0})">
            <summary>
            Determines whether the given sequence of <see cref="T:System.Span`1"/> follows
            the given recurring sequence of <see cref="T:System.Span`1"/> exactly.
            </summary>
            <param name="recurringSequence">The template recurring sequence.</param>
            <param name="sequenceToMatch">The sequence to test.</param>
            <returns>If the given <paramref name="sequenceToMatch"/> exactly follows the given <paramref name="recurringSequence"/>, returns <see langword="true"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Zintom.StorageFacility.Helpers.ChangeElementType``1(System.Object[])">
            <summary>
            Changes the <see cref="T:System.Type"/> of each of the source array elements to that of <typeparamref name="TTargetType"/>.
            </summary>
            <typeparam name="TTargetType">The <see cref="T:System.Type"/> that the array items are to be converted to.</typeparam>
            <param name="sourceArray"></param>
            <returns>A new <typeparamref name="TTargetType"/> array.</returns>
        </member>
        <member name="T:Zintom.StorageFacility.Storage">
            <summary>
            A class which simplifies data storage to disk allowing for easy saving, loading and access of a key-value data structure.
            </summary>
        </member>
        <member name="P:Zintom.StorageFacility.Storage.Booleans">
            <summary>
            A dictionary of all <see cref="T:System.Boolean"/>'s contained within this <see cref="T:Zintom.StorageFacility.Storage"/>.
            </summary>
        </member>
        <member name="P:Zintom.StorageFacility.Storage.Integers">
            <summary>
            A dictionary of all <see cref="T:System.Int32"/>'s contained within this <see cref="T:Zintom.StorageFacility.Storage"/>.
            </summary>
        </member>
        <member name="P:Zintom.StorageFacility.Storage.Longs">
            <summary>
            A dictionary of all <see cref="T:System.Int64"/>'s contained within this <see cref="T:Zintom.StorageFacility.Storage"/>.
            </summary>
        </member>
        <member name="P:Zintom.StorageFacility.Storage.Floats">
            <summary>
            A dictionary of all <see cref="T:System.Single"/>'s contained within this <see cref="T:Zintom.StorageFacility.Storage"/>.
            </summary>
        </member>
        <member name="P:Zintom.StorageFacility.Storage.Strings">
            <summary>
            A dictionary of all <see cref="T:System.String"/>'s contained within this <see cref="T:Zintom.StorageFacility.Storage"/>.
            </summary>
        </member>
        <member name="P:Zintom.StorageFacility.Storage.StringArrays">
            <summary>
            A dictionary of all string arrays contained within this <see cref="T:Zintom.StorageFacility.Storage"/>.
            </summary>
        </member>
        <member name="P:Zintom.StorageFacility.Storage.IntegerArrays">
            <summary>
            A dictionary of all integer arrays contained within this <see cref="T:Zintom.StorageFacility.Storage"/>.
            </summary>
        </member>
        <member name="P:Zintom.StorageFacility.Storage.LongArrays">
            <summary>
            A dictionary of all <see cref="T:System.Int64"/> arrays contained within this <see cref="T:Zintom.StorageFacility.Storage"/>.
            </summary>
        </member>
        <member name="P:Zintom.StorageFacility.Storage.FloatArrays">
            <summary>
            A dictionary of all <see cref="T:System.Single"/> arrays contained within this <see cref="T:Zintom.StorageFacility.Storage"/>.
            </summary>
        </member>
        <member name="P:Zintom.StorageFacility.Storage.Raws">
            <summary>
            A dictionary of all <see cref="T:System.Byte"/> arrays contained within this <see cref="T:Zintom.StorageFacility.Storage"/>.
            </summary>
        </member>
        <member name="M:Zintom.StorageFacility.Storage.GetStorage(System.String)">
            <summary>
            Gets the associated <see cref="T:Zintom.StorageFacility.Storage"/> object for the given <paramref name="filePath"/>.
            <para>If there is no <see cref="T:Zintom.StorageFacility.Storage"/> for this <paramref name="filePath"/> in the pool, a new <see cref="T:Zintom.StorageFacility.Storage"/>
            is created and parsed before control is returned, this may be an expensive operation depending on the size of the file.</para>
            </summary>
        </member>
        <member name="M:Zintom.StorageFacility.Storage.Edit(System.Boolean)">
            <summary>
            Gets the <see cref="T:Zintom.StorageFacility.IStorageEditor"/> for this <see cref="T:Zintom.StorageFacility.Storage"/>, which can be used to modify the values that this storage manages.
            </summary>
            <remarks>
            The returned <see cref="T:Zintom.StorageFacility.IStorageEditor"/> persists for the life-time of this <see cref="T:Zintom.StorageFacility.Storage"/> object and can be called up through multiple calls to <c>Edit()</c>,
            the object returned is an identical reference to the underlying editor.
            <para/>
            You must call <see cref="M:Zintom.StorageFacility.IStorageEditor.Commit"/> to apply the changes to disk.
            </remarks>
            <param name="outputOptimizedForReading">If true, the editor should try and optimize the output file for reading, using new-lines where appropriate.</param>
        </member>
        <member name="F:Zintom.StorageFacility.Storage.StorageEditor.OutputOptimizedForReading">
            <summary>
            If true, the editor should try and optimize the output file for reading, using new-lines where appropriate.
            </summary>
        </member>
        <member name="M:Zintom.StorageFacility.Storage.GetStorageFileContents(System.String)">
            <summary>
            Gets the string contents of the given storage file.
            </summary>
        </member>
        <member name="M:Zintom.StorageFacility.Storage.ParseStorageFile">
            <summary>
            Loads the given storage file into memory and parses each item into their respective String, Array, Integer etc values.
            </summary>
        </member>
        <member name="M:Zintom.StorageFacility.Storage.DisplayLoadedValues">
            <summary>
            Displays all the loaded values in the console log.
            </summary>
        </member>
        <member name="M:Zintom.StorageFacility.Storage.GetTypeFromShortHand(System.String)">
            <summary>
            Converts the short-hand <see cref="T:System.String"/> representation of a type to its object <see cref="T:System.Type"/> version.
            <para/>
            </summary>
            <remarks>For example <b>F</b> returns <see cref="T:System.Single"/> and <b>B</b> returns <see cref="T:System.Boolean"/>,
            if unrecognised, will return <see cref="T:System.String"/>.</remarks>
        </member>
        <member name="M:Zintom.StorageFacility.Storage.ChangeType``1(System.Object)">
            <summary>
            Changes the <see cref="T:System.Type"/> of the given <see cref="T:System.Object"/> to the given <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:Zintom.StorageFacility.Storage.Tokenize(System.String)">
            <summary>
            Parses a given input converting to parsable <see cref="T:Zintom.StorageFacility.Storage.Token"/>'s.
            </summary>
        </member>
        <member name="F:Zintom.StorageFacility.Storage.Token.TType">
            <summary>
            This tokens type <see cref="T:Zintom.StorageFacility.Storage.TokenType"/>.
            </summary>
        </member>
        <member name="F:Zintom.StorageFacility.Storage.Token.Value">
            <summary>
            The string value that this token holds.
            </summary>
        </member>
        <member name="F:Zintom.StorageFacility.Storage.TokenType.String">
            <summary>
            Represents an array of characters, i.e "hello".
            </summary>
        </member>
        <member name="F:Zintom.StorageFacility.Storage.TokenType.Seperator">
            <summary>
            Represents <see cref="F:Zintom.StorageFacility.Storage.TokenStrings.Seperator"/>
            </summary>
        </member>
        <member name="F:Zintom.StorageFacility.Storage.TokenType.TypeDeclaration">
            <summary>
            Represents the <see cref="T:System.Type"/> stored for an assignment, i.e L(<see cref="T:System.Int64"/>), I(<see cref="T:System.Int32"/>) etc.
            </summary>
        </member>
        <member name="F:Zintom.StorageFacility.Storage.TokenType.AssignmentOperator">
            <summary>
            Represents <see cref="F:Zintom.StorageFacility.Storage.TokenStrings.AssignmentOperator"/>
            </summary>
        </member>
        <member name="F:Zintom.StorageFacility.Storage.TokenType.ArrayAssignmentOperator">
            <summary>
            Represents <see cref="F:Zintom.StorageFacility.Storage.TokenStrings.ArrayAssignmentOperator"/>
            </summary>
        </member>
        <member name="F:Zintom.StorageFacility.Storage.TokenType.ObjectTerminator">
            <summary>
            Represents <see cref="F:Zintom.StorageFacility.Storage.TokenStrings.ObjectTerminator"/>
            </summary>
        </member>
        <member name="T:Zintom.StorageFacility.IStorageEditor">
            <summary>
            Provides an interface to the <see cref="T:Zintom.StorageFacility.Storage.StorageEditor"/>, allowing you to
            put values into a <see cref="T:Zintom.StorageFacility.Storage"/> and also commit those values to file.
            </summary>
        </member>
        <member name="M:Zintom.StorageFacility.IStorageEditor.PutValue(System.String,System.Boolean)">
            <summary>
            Puts the given <paramref name="value"/> into <see cref="T:Zintom.StorageFacility.Storage"/> with the given <paramref name="key"/>.
            </summary>
            <param name="key">The key to use which identifies this value.</param>
            <param name="value">The value to be stored.</param>
        </member>
        <member name="M:Zintom.StorageFacility.IStorageEditor.PutValue(System.String,System.Int32)">
            <inheritdoc cref="M:Zintom.StorageFacility.IStorageEditor.PutValue(System.String,System.Boolean)"/>
        </member>
        <member name="M:Zintom.StorageFacility.IStorageEditor.PutValue(System.String,System.Int64)">
            <inheritdoc cref="M:Zintom.StorageFacility.IStorageEditor.PutValue(System.String,System.Boolean)"/>
        </member>
        <member name="M:Zintom.StorageFacility.IStorageEditor.PutValue(System.String,System.Single)">
            <inheritdoc cref="M:Zintom.StorageFacility.IStorageEditor.PutValue(System.String,System.Boolean)"/>
        </member>
        <member name="M:Zintom.StorageFacility.IStorageEditor.PutValue(System.String,System.String)">
            <inheritdoc cref="M:Zintom.StorageFacility.IStorageEditor.PutValue(System.String,System.Boolean)"/>
        </member>
        <member name="M:Zintom.StorageFacility.IStorageEditor.PutValue(System.String,System.String[])">
            <summary>
            Puts the given <paramref name="values"/> into <see cref="T:Zintom.StorageFacility.Storage"/> with the given <paramref name="key"/>.
            </summary>
            <param name="key">The key to use which identifies this value.</param>
            <param name="values">The value to be stored.</param>
        </member>
        <member name="M:Zintom.StorageFacility.IStorageEditor.PutValue(System.String,System.Int32[])">
            <inheritdoc cref="M:Zintom.StorageFacility.IStorageEditor.PutValue(System.String,System.String[])"/>
        </member>
        <member name="M:Zintom.StorageFacility.IStorageEditor.PutValue(System.String,System.Int64[])">
            <inheritdoc cref="M:Zintom.StorageFacility.IStorageEditor.PutValue(System.String,System.String[])"/>
        </member>
        <member name="M:Zintom.StorageFacility.IStorageEditor.PutValue(System.String,System.Single[])">
            <inheritdoc cref="M:Zintom.StorageFacility.IStorageEditor.PutValue(System.String,System.String[])"/>
        </member>
        <member name="M:Zintom.StorageFacility.IStorageEditor.PutValue(System.String,System.Byte[])">
            <inheritdoc cref="M:Zintom.StorageFacility.IStorageEditor.PutValue(System.String,System.String[])"/>
        </member>
        <member name="M:Zintom.StorageFacility.IStorageEditor.Commit">
            <summary>
            Save the contents of the <see cref="T:Zintom.StorageFacility.Storage"/> to disk.
            </summary>
        </member>
        <member name="M:Zintom.StorageFacility.IStorageEditor.Clear(System.Boolean)">
            <summary>
            Wipes all keys/values from this <see cref="T:Zintom.StorageFacility.Storage"/>.
            <para><c>confirmWipe</c> must be set to <c>true</c> in order for this method to execute, it will return immediately if set to <c>false</c>.</para>
            </summary>
        </member>
        <member name="T:Zintom.StorageFacility.IRepresent`1">
            <summary>
            An object may not be equal but may still <b>'represent'</b> another object.
            For example, two boxes may differ in content, but on the outside still represent a 'box'.
            </summary>
            <remarks>Implement this interface to show the intent that "these two objects are not equal but represent the same or similar thing".
            <para>Not the same as <see cref="T:System.Type"/> because the <c>Represents(T obj)</c> method transcends the restrictions of <see cref="T:System.Type"/>, 
            two objects of completely unrelated Type can represent the same thing.</para></remarks>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Zintom.StorageFacility.IRepresent`1.Represents(`0)">
            <summary>
            Determines whether the specified object <b>represents</b> the current object.
            </summary>
            <remarks>An object may not be equal but may still <b>'represent'</b> another object.
            For example, two boxes may differ in content, but on the outside still represent a 'box'.</remarks>
            <returns><b>true</b> if the specified object represents the current object; otherwise, <b>false</b>.</returns>
        </member>
    </members>
</doc>
